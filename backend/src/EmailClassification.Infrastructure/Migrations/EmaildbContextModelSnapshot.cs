// <auto-generated />
using System;
using EmailClassification.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmailClassification.Infrastructure.Migrations
{
    [DbContext(typeof(EmaildbContext))]
    partial class EmaildbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.AppUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsTemp")
                        .HasColumnType("boolean")
                        .HasColumnName("is_temp");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("app_user_pkey");

                    b.ToTable("app_user", (string)null);
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.Email", b =>
                {
                    b.Property<string>("EmailId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_id");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer")
                        .HasColumnName("direction_id");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("from_address");

                    b.Property<string>("HistoryId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("history_id");

                    b.Property<int?>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    b.Property<string>("PlainText")
                        .HasColumnType("text")
                        .HasColumnName("plain_text");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_date");

                    b.Property<string>("Snippet")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("snippet");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<string>("ToAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("to_address");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("EmailId")
                        .HasName("email_pkey");

                    b.HasIndex(new[] { "UserId" }, "IX_email_user_id");

                    b.HasIndex(new[] { "DirectionId" }, "email_direction_id_index");

                    b.HasIndex(new[] { "LabelId" }, "email_label_id_index");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.EmailDirection", b =>
                {
                    b.Property<int>("DirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("direction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DirectionId"));

                    b.Property<string>("DirectionName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("direction_name");

                    b.HasKey("DirectionId")
                        .HasName("email_direction_pkey");

                    b.ToTable("email_direction", (string)null);

                    b.HasData(
                        new
                        {
                            DirectionId = 1,
                            DirectionName = "INBOX"
                        },
                        new
                        {
                            DirectionId = 2,
                            DirectionName = "SENT"
                        },
                        new
                        {
                            DirectionId = 3,
                            DirectionName = "DRAFT"
                        });
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.EmailLabel", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("LabelId"));

                    b.Property<string>("LabelName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label_name");

                    b.HasKey("LabelId")
                        .HasName("email_label_pkey");

                    b.ToTable("email_label", (string)null);
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("token_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId");

                    b.HasIndex(new[] { "UserId" }, "IX_token_user_id");

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.Email", b =>
                {
                    b.HasOne("EmailClassification.Infrastructure.Persistence.EmailDirection", "Direction")
                        .WithMany("Emails")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("email_direction_id_fkey");

                    b.HasOne("EmailClassification.Infrastructure.Persistence.EmailLabel", "Label")
                        .WithMany("Emails")
                        .HasForeignKey("LabelId")
                        .HasConstraintName("email_label_id_fkey");

                    b.HasOne("EmailClassification.Infrastructure.Persistence.AppUser", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("email_user_id_fkey");

                    b.Navigation("Direction");

                    b.Navigation("Label");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.Token", b =>
                {
                    b.HasOne("EmailClassification.Infrastructure.Persistence.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.AppUser", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.EmailDirection", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("EmailClassification.Infrastructure.Persistence.EmailLabel", b =>
                {
                    b.Navigation("Emails");
                });
#pragma warning restore 612, 618
        }
    }
}
