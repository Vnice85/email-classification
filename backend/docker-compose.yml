services:
  email-classification: 
    build:
      context: .
      dockerfile: ./src/EmailClassification.API/Dockerfile
    image: ${EMAIL_API_IMAGE}
    container_name: ${EMAIL_API_CONTAINER}
    ports:  
      - "${BACKEND_PORT}:8081"
    depends_on:
      - postgres
      - elastic
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=${CERT_PATH}
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST};Port=${DB_PORT};Database=${DB_NAME};UserId=${DB_USER};Password=${DB_PASSWORD};
       
        # Elastic Search
      - Elastic__Url=${ELASTIC_URL}
      - Elastic__Index=${ELASTIC_INDEX}

       # Google Authentication
      - Authentication__Google__ClientId=${GOOGLE_CLIENT_ID}
      - Authentication__Google__ProjectId=${GOOGLE_PROJECT_ID}
      - Authentication__Google__AuthUri=${GOOGLE_AUTH_URI}
      - Authentication__Google__EndpointApi=${GOOGLE_ENDPOINT_API}
      - Authentication__Google__TokenUri=${GOOGLE_TOKEN_URI}
      - Authentication__Google__auth_provider_x509_cert_url=${GOOGLE_CERT_URL}
      - Authentication__Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
      - Authentication__Google__CallbackPath=${GOOGLE_CALLBACK_PATH}

      # JWT Authentication
      - Authentication__Jwt__Issuer=${JWT_ISSUER}
      - Authentication__Jwt__Audience=${JWT_AUDIENCE}
      - Authentication__Jwt__Key=${JWT_KEY}
      - Authentication__Jwt__ExpiryInMinutes=${JWT_EXPIRY_MINUTES}

      # AES Encryption
      - Aes__Key=${AES_KEY}

      # AI API
      - ClassificationApi__Endpoint=${CLASSIFICATION_API_ENDPOINT}
    networks:
      - emailcf

  postgres:
    image: postgres:latest
    container_name: ${POSTGRES_CONTAINER}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data
    networks:
      - emailcf

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: ${ELASTICSEARCH_CONTAINER}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - emailcf

volumes:
  postgresdata:
    driver: local
  esdata:
    driver: local

networks:
  emailcf:
    driver: bridge
  
  